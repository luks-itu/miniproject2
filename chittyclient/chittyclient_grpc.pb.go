// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chittyclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClientClient is the client API for ChatClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClientClient interface {
	Broadcast(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ResponseCode, error)
	AnnounceJoin(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*ResponseCode, error)
	AnnounceLeave(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*ResponseCode, error)
}

type chatClientClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClientClient(cc grpc.ClientConnInterface) ChatClientClient {
	return &chatClientClient{cc}
}

func (c *chatClientClient) Broadcast(ctx context.Context, in *Message, opts ...grpc.CallOption) (*ResponseCode, error) {
	out := new(ResponseCode)
	err := c.cc.Invoke(ctx, "/ChatClient/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClientClient) AnnounceJoin(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*ResponseCode, error) {
	out := new(ResponseCode)
	err := c.cc.Invoke(ctx, "/ChatClient/AnnounceJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClientClient) AnnounceLeave(ctx context.Context, in *UserName, opts ...grpc.CallOption) (*ResponseCode, error) {
	out := new(ResponseCode)
	err := c.cc.Invoke(ctx, "/ChatClient/AnnounceLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatClientServer is the server API for ChatClient service.
// All implementations must embed UnimplementedChatClientServer
// for forward compatibility
type ChatClientServer interface {
	Broadcast(context.Context, *Message) (*ResponseCode, error)
	AnnounceJoin(context.Context, *UserName) (*ResponseCode, error)
	AnnounceLeave(context.Context, *UserName) (*ResponseCode, error)
	mustEmbedUnimplementedChatClientServer()
}

// UnimplementedChatClientServer must be embedded to have forward compatible implementations.
type UnimplementedChatClientServer struct {
}

func (UnimplementedChatClientServer) Broadcast(context.Context, *Message) (*ResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedChatClientServer) AnnounceJoin(context.Context, *UserName) (*ResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceJoin not implemented")
}
func (UnimplementedChatClientServer) AnnounceLeave(context.Context, *UserName) (*ResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceLeave not implemented")
}
func (UnimplementedChatClientServer) mustEmbedUnimplementedChatClientServer() {}

// UnsafeChatClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatClientServer will
// result in compilation errors.
type UnsafeChatClientServer interface {
	mustEmbedUnimplementedChatClientServer()
}

func RegisterChatClientServer(s grpc.ServiceRegistrar, srv ChatClientServer) {
	s.RegisterService(&ChatClient_ServiceDesc, srv)
}

func _ChatClient_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatClientServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatClient/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatClientServer).Broadcast(ctx, req.(*Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatClient_AnnounceJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatClientServer).AnnounceJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatClient/AnnounceJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatClientServer).AnnounceJoin(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatClient_AnnounceLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatClientServer).AnnounceLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChatClient/AnnounceLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatClientServer).AnnounceLeave(ctx, req.(*UserName))
	}
	return interceptor(ctx, in, info, handler)
}

// ChatClient_ServiceDesc is the grpc.ServiceDesc for ChatClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChatClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChatClient",
	HandlerType: (*ChatClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _ChatClient_Broadcast_Handler,
		},
		{
			MethodName: "AnnounceJoin",
			Handler:    _ChatClient_AnnounceJoin_Handler,
		},
		{
			MethodName: "AnnounceLeave",
			Handler:    _ChatClient_AnnounceLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chittyclient.proto",
}
