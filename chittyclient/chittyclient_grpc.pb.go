// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package chittyclient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChittyClientClient is the client API for ChittyClient service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChittyClientClient interface {
	Broadcast(ctx context.Context, in *Client_Message, opts ...grpc.CallOption) (*Client_ResponseCode, error)
	AnnounceJoin(ctx context.Context, in *Client_UserName, opts ...grpc.CallOption) (*Client_ResponseCode, error)
	AnnounceLeave(ctx context.Context, in *Client_UserName, opts ...grpc.CallOption) (*Client_ResponseCode, error)
}

type chittyClientClient struct {
	cc grpc.ClientConnInterface
}

func NewChittyClientClient(cc grpc.ClientConnInterface) ChittyClientClient {
	return &chittyClientClient{cc}
}

func (c *chittyClientClient) Broadcast(ctx context.Context, in *Client_Message, opts ...grpc.CallOption) (*Client_ResponseCode, error) {
	out := new(Client_ResponseCode)
	err := c.cc.Invoke(ctx, "/ChittyClient/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyClientClient) AnnounceJoin(ctx context.Context, in *Client_UserName, opts ...grpc.CallOption) (*Client_ResponseCode, error) {
	out := new(Client_ResponseCode)
	err := c.cc.Invoke(ctx, "/ChittyClient/AnnounceJoin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chittyClientClient) AnnounceLeave(ctx context.Context, in *Client_UserName, opts ...grpc.CallOption) (*Client_ResponseCode, error) {
	out := new(Client_ResponseCode)
	err := c.cc.Invoke(ctx, "/ChittyClient/AnnounceLeave", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChittyClientServer is the server API for ChittyClient service.
// All implementations must embed UnimplementedChittyClientServer
// for forward compatibility
type ChittyClientServer interface {
	Broadcast(context.Context, *Client_Message) (*Client_ResponseCode, error)
	AnnounceJoin(context.Context, *Client_UserName) (*Client_ResponseCode, error)
	AnnounceLeave(context.Context, *Client_UserName) (*Client_ResponseCode, error)
	mustEmbedUnimplementedChittyClientServer()
}

// UnimplementedChittyClientServer must be embedded to have forward compatible implementations.
type UnimplementedChittyClientServer struct {
}

func (UnimplementedChittyClientServer) Broadcast(context.Context, *Client_Message) (*Client_ResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedChittyClientServer) AnnounceJoin(context.Context, *Client_UserName) (*Client_ResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceJoin not implemented")
}
func (UnimplementedChittyClientServer) AnnounceLeave(context.Context, *Client_UserName) (*Client_ResponseCode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AnnounceLeave not implemented")
}
func (UnimplementedChittyClientServer) mustEmbedUnimplementedChittyClientServer() {}

// UnsafeChittyClientServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChittyClientServer will
// result in compilation errors.
type UnsafeChittyClientServer interface {
	mustEmbedUnimplementedChittyClientServer()
}

func RegisterChittyClientServer(s grpc.ServiceRegistrar, srv ChittyClientServer) {
	s.RegisterService(&ChittyClient_ServiceDesc, srv)
}

func _ChittyClient_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client_Message)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyClientServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyClient/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyClientServer).Broadcast(ctx, req.(*Client_Message))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyClient_AnnounceJoin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client_UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyClientServer).AnnounceJoin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyClient/AnnounceJoin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyClientServer).AnnounceJoin(ctx, req.(*Client_UserName))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChittyClient_AnnounceLeave_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Client_UserName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChittyClientServer).AnnounceLeave(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ChittyClient/AnnounceLeave",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChittyClientServer).AnnounceLeave(ctx, req.(*Client_UserName))
	}
	return interceptor(ctx, in, info, handler)
}

// ChittyClient_ServiceDesc is the grpc.ServiceDesc for ChittyClient service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChittyClient_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ChittyClient",
	HandlerType: (*ChittyClientServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Broadcast",
			Handler:    _ChittyClient_Broadcast_Handler,
		},
		{
			MethodName: "AnnounceJoin",
			Handler:    _ChittyClient_AnnounceJoin_Handler,
		},
		{
			MethodName: "AnnounceLeave",
			Handler:    _ChittyClient_AnnounceLeave_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "chittyclient.proto",
}
